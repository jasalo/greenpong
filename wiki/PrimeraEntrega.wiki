=PRIMERA ENTREGA EXPOANDES (05/03/2007)=


*OJO:Antes de editar por favor revisen PrimeraEntregaDocumentoBase*


==Objetivos y razon de ser del proyecto==

El equipo de trabajo de GreenPong pretende hacer posible que se juegue un clon del videojuego PONG, que fue de los primeros de la historia (ver, PONG [en linea] <>), recibiendo las ordenes del usuario para mover la barra que le corresponde enel juego usando un sistema no convencional. Para este proyeto en específico el sistema no convencional se refiere a una pelota de tennis con un mango  cuya posición en el espacio es identificada por una camra conectada a un computador. La camara unida a un programa llamado VTS (visual tracknig system) genera constantemente información que representa la posición de la bola y que el juego Pong usa para mover la barra del usuario hasta que pierde. 

Es un proyecto que requiere un gran esfuerzo por parte de los integrantes del proyecto, conocimientos de programación medianamente básicos y una considerable disponibilidad de tiempo. La creación de greenPong (pong + VTS) es un intento por crear formas económicas y poco convencionales de interactividad. Existen dispositivos que hacen posible que los movimientos del usuario en el espacio real se reflejen en el espacio virtual, sin embargo, greenPong apela a la necesidad de conseguir dicha interactividad a bajo precio, así sea sólo de modo experimental y sin ninguna intención de hacerlo lucrativo por el momento. ¿Qué mejor manera de lograrlo que con una cámara y una bola de tennis?

*Lo que pretendemos implementar como solución es conocido en el medio de la informatica como visual tracking que consiste en (básicamente) ubicar en un espacio y tiempo determinados el movimiento del objeto de estudio (en nuestro caso pelota de tennis) usando como medio de captura de datos una camara conectada al computador. * (Nosotros dijimos en el primero documento que esto era un plus del proyecto y que lo fundamental era tener pong fucinoando y jugable y que luego ibamos a avanzar, por eso no podemos poner en los objetivos esto) Si pacho esta de acuerdo lo borra o mira que seria necesario para no tener incongruencias con el primero documento que hicimos)*

==Aproximación al problema desde la ingeniería de sistemas y computación==
Sin duda los términos en los que hemos descrito el objetivo del documento dejan claro que hablamos de una solución a través de computadores. Necesitamos una camara que obtiene imágenes de la realidad de las que obtenemos información a través de la modificación de dichas imágenes y de la aplicación de algoritmos para identificar en que parte de la imágen se encuentra la bola de tennis. Luego ese programa, el VTS, entrega una seria de coordenadas al juego y ese mueve la barra y verifica si hubo o no contacto con la bola y gestiona el movimiento de todas las partes del juego. Estamos hablando de un programa que sigue un algoritmo y de otro programa que usa esa información para funcionar.

Entonces, se requiere una camara, un VTS desarrollado en java, porque es el lenguaje al que más acceso tenemos todos por el momento y porque no todos tenemos los mismos conocimientos de programación por el momento. Para lograr esto usaremos linux pues permite manipular con mayor facilidad el acceso a la camara y existe mucha documentación online sobre el sistema operativo que puedee resultar util. Además, linux suele ser un sistema más rapido y personlizable, ésto permite lograr un resultado final más facilmente al haber menos restricciones. Por otro lado, linux permite la comunicación de procesos con facilidad y esto podria eventualmente ser necesario para la integración de la camara con el VTS y del VTS con Pong.

Adicional, Java resulta ser un lenguaje adecuado porque su documentación es amplia, es sencillo para la creación de interfaces gráficas y es un sistema ampliamente utilizado para el desarrollo de juegos. Además es multiplataforma y recientemente es código abierto y libre. Este ultimo aspecto es fundamental para la filosofía de nuestro proyecto, pues GreenPong será una aplicación de código abierto y libre distribución siempre que se respete la autoría original y no se use con fines lucrativos.

Analizando entonces otras posibles soluciones cabe mencionar que los lenguajes que requieran compilarse para cada sistema operativo en particular no están entre los posibles lenguajes a usar pues romperian con la posibilidad de que en el futuro esta forma experimental de interactividad pueda ser utilizada por otras personas. Además los lenguajes más conocidos de ese tipo resultan bastante más complejos que java y no hacen parte de los cursos de programación que se toman en primer semestre. Otras soluciones como C# utilizando la plataforma mono (el equivalente a .NET en código abierto), tienen la dificultad de ser más nuevos, y tener una sintaxis muy particular y requerir toda una plataforma para desarrollar en ellos y correr las aplicaciones resultantes que no esta tan utilizada como java, además mono no llega todavia  a la amplitud de .NET y no está entre los planes ni la filosofía de éste proyecto utilizar un lenguaje propiedad de una compañia sin compromiso con el desarrollo de software más accesiqueble y con más enfoque social por mero logro de la comunicación entre los hombres.

==Conocimiento necesarios de otras áreas del conocimiento==
Para que este proyecto salga adelante se requiere pensar las formas en que matematicamente se debe gestionar la información de los dos programas del proyecto para hacerlo de la mejor forma posible, logrando simplifcar código y la utilización de recursos de la máquina en que se corran. Conceptos de geometria analítica pueden resultar útiles para gestionar la posición de los objetos del juego en el tablero y para sacar de dichas posiciones información, por ejemplo: Cuando un usuario pierde o cuando golpea la bola. Basicamente a traves de la geometria y la matematicas se pretende trazar calculos de trayectoria, rebotes, dirección, y trantando de emplear modelos cercanos a la fisica (sin recrearlos totalmente) para las condiciones de rebotes, movimiento y velocidad dentro del desarrollo de la mecánica del juego.

Los conocimientos de diseño sobre el manejo de la imágen, los efectos de aplicar un algoritmo sobre ella y la forma en que se puede llegar a cierto tipo de imágen a partir de otra serán necesarios para el VTS. Sin dichos conceptos no se puede saber como aprovechar de la mejor forma utilidades como Java Advanced Imaging API o las librerias desarrolladas por terceros para manipulación de imágenes en aplicaciones Java.

==Actividades pensadas para desarrollar el proyecto==

La actividad central sobre la cual gira el proyecto en esta primera fase es la investigación y documentación sobre los recursos de Java y el código necesario para implementar el juego de PONG inicialmente, y para entender la disposicion del sistema de VTS que se integraria con los otros elementos.

Las actividades posteriores son basicamente la creacion del código del PONG y disposicion de la camara para unificarlo con el juego, además del diseño de algoritmos y cálculos que se emplearan para simular el movimiento de la pelota, el rebote, y demás elementos dinámicos necesarios.

**TODO, completar esto...**

==Avances del proyecto==

Nuestro equipo de trabajo se ha comprometido profundamente con *[ greenPong ]*. Debido a nuestro afán por documentar el proyecto, hemos decidido crear desde el comienzo un wiki y un repositorio de subversiones para almacenar nuestro código fuente. Ambos pueden verse desde internet ingresando en <http://code.google.com/p/greenpong>. Como puede verse la documentación y el código están hospedados en una herramienta web de google diseñada para facilitar el desarrollo de proyectos de código abierto.

Sobre como desarrollar el juego (que es la primer fase del proyecto y que está próxima a concluir según el calendario propuesto en la entrega preliminar) se han realizado ciertas decisiones sobre el modelo de clases en Java. Se han creado clases para las barras y la bola y un contener, una clase gestiona la entrada y la salida y se comunica con otra llamada Brain. Esa separación, que puede parecer exagerada, nos ha parecido adecuada pues está pensada para la futura integración con el VTS en la segunda fase de GreenPong. Para el desarrollo del cerebro del programa también se han consultado otros clones de pong disponibles gratuitamente online. Dichas fuentes están mencionadas en el listado de fuentes al final de este documento. 

Como entorno de desarrollo se está utilizando eclipse 3.1 con un plugin para acceder a repositorio de subversiones permitiendo desarrollar a los integrantes del grupo por partes el código desde distintas ubicaciones geográficas. Eclipse corre sobre ubuntu 6.06 Desktop version por lo que se explicaba previamente respecto a linux como sistema base del proyecto. Para compilar el código y empaquetarlo se usa Ant porque el modelo de proyecto usado por la universidad supuso muchos inconvenientes por no estar diseñado para cualquier plataforma, ant en cambio es gratuito y se puede correr en varios sitemas operativos.

Un libro de referencia a Java completo y reconocido ha sido enviado a todos los integrantes del proyecto para que puedan informarse sobre la creación de GUIs (interfaces gráficas de usuario) en este lenguaje de modo que puedan leer y justificar las lineas de código que se van agregando al respositorio de subversiones. Se trata del libro Thinking in Java de Bruce Eckel. Tambiénd icho libro está referenciado al final del documento.

==Listado de fuentes==
Dado que resulta útil saber de que se trata cada fuente y que todas son fuentes en línea se ha mencionado aquí URL, título y temática del documento. Esta lista esta en constante actualización a través del wiki de GreenPong y puede consultarse online en <http://code.google.com/p/greenpong/wiki/FuentesDocumentacion>.

  * <http://www.mindviewinc.com/downloads/TIJ-3rd-edition4.0.zip> Thinking in Java, ECKEL, Bruce. 3rd edition. Libro completo y extenso con código fuente y gratuito de referencia para el lenguaje java.
  * <http://www.gamearchitect.net/Articles/GameObjects1.html> Game Object Structure, Documento sobre como debe ser la estructura de clases, habla de juegos en C++, pero resulta util para decidir crear clases Box, Ball y Bar como entidades separada que se comunican y no heredan de un objeto general,ej gameObject
  * <http://www.jtech.ua.es/tutoriales/apuntes/sesion-ant-apuntes.htm> Automatización con Ant, Explica la utilización de Ant para generar un archivo build.xml que compila el código java, lo empaqueta y lo ejecuta. build.xml ya ha sido creado y hace parte del código fuente.
  * <http://www.onjava.com/pub/a/onjava/excerpt/anttdg2_ch11/index.html?page=1> Integrating Ant with Eclipse, Explica como hacer parte de un proyecto de eclipse un build.xml para Ant y explica como ejecutar desde este IDE la construcción de la aplicacion. build.xml ya ha sido creado en el proyecto y funciona.
  * <http://www.javacooperation.gmxhome.de/TutorialStartEng.html> The Java Game Development Tutorial.
  * <http://www.xnet.se/javaTest/jPong/jPong.html> Tablero pong, Este Pong se corre como un applet en el navegador y se usó para obtener las proporciones para los tamaños de los elementos de la interfaz gráfica que se mencionan en el documento del tema.
  * <http://uguu.org/arc_pong.html> Pong Source, Código de Pong que puede ser referencia de como implementar el juego.
  * <http://patriot.net/~tvalesky/paddlegame.html> Pong simplificado, juego de pong simplificado (1player) del que se puede estudiar la interfaz y la detección de colisiones y recepción de información del mouse.
  * <http://java.sun.com/products/java-media/jai/forDevelopers/jaifaq.html> Java Advanced Imaging API, Documentación del API de procesamiento avanzado de imagenes de Sun para Java (Inglés)
  * <http://www.planetacodigo.com/planeta/date/2004/02/> Tratamiento de imagenes con Java, Artículo acerca del procesamiento imagenes en Java (Español)
  * <http://www.javahispano.org/codelibsbin.type.action?type=libsbin> Libreria de código, Codigo en java documentado en español que puede incorporarse en una aplicación. Útil para la documentación de los integrantes del proyecto en el lenguaje de programación.




==Metodología (para saber de que se trata cada parte)(EXTRADOCUMENTO)==

_"Los grupos deben realizar una investigación de la situación actual de la situación   seleccionada. Cuáles son sus componentes, cuáles sus relaciones._

_De otra parte, se debe reportar las propuestas de solución que existen, sus principales características._

_Toda la información recopilada debe ser correctamente citada y expuesta en el trabajo, sin ser transcrita, sino analizada para poder tomar alguna posición personal al respecto._

_Con qué disciplinas debe complementar la Ingeniería de Sistemas y Computación para generar una solución integral a la situación identificada._

_Con base a los requerimientos identificados, se debe formular un conjunto de actividades (y resultados de cada actividad) que, conjuntamente, contribuyan a la construcción de la solución "_


==Notas al equipo de trabajo (EXTRADOCUMENTO)==
Borre la palabra versátil, no sé a que se refiere y Tibero seguramente va a hacer una pregunta de diccionario y capciosa en torno al tema, por eso mejor ahorrarse terminos que suenan muy ingeniericos pero que a algunos profesores no le agradan.